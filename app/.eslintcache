[{"/Users/maximilianresch/Documents/recipe-app/app/src/index.js":"1","/Users/maximilianresch/Documents/recipe-app/app/src/App.js":"2","/Users/maximilianresch/Documents/recipe-app/app/src/reportWebVitals.js":"3","/Users/maximilianresch/Documents/recipe-app/app/src/pages/Login.js":"4","/Users/maximilianresch/Documents/recipe-app/app/src/pages/Register.js":"5","/Users/maximilianresch/Documents/recipe-app/app/src/pages/RecipeForm.js":"6","/Users/maximilianresch/Documents/recipe-app/app/src/pages/Home.js":"7","/Users/maximilianresch/Documents/recipe-app/app/src/utils/auth.js":"8","/Users/maximilianresch/Documents/recipe-app/app/src/components/Footer.js":"9","/Users/maximilianresch/Documents/recipe-app/app/src/utils/recipeApi.js":"10","/Users/maximilianresch/Documents/recipe-app/app/src/globalState.js":"11","/Users/maximilianresch/Documents/recipe-app/app/src/pages/Profile.js":"12","/Users/maximilianresch/Documents/recipe-app/app/src/pages/RecipeList.js":"13","/Users/maximilianresch/Documents/recipe-app/app/src/pages/RecipeEdit.js":"14","/Users/maximilianresch/Documents/recipe-app/app/src/helper/useResponsive.js":"15"},{"size":674,"mtime":1610549640482,"results":"16","hashOfConfig":"17"},{"size":4950,"mtime":1610641987159,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1607354524054,"results":"19","hashOfConfig":"17"},{"size":2634,"mtime":1610640940214,"results":"20","hashOfConfig":"17"},{"size":3803,"mtime":1610640519139,"results":"21","hashOfConfig":"17"},{"size":5740,"mtime":1610640060328,"results":"22","hashOfConfig":"17"},{"size":893,"mtime":1609162067269,"results":"23","hashOfConfig":"17"},{"size":270,"mtime":1608030108036,"results":"24","hashOfConfig":"17"},{"size":618,"mtime":1608041783500,"results":"25","hashOfConfig":"17"},{"size":213,"mtime":1608217760443,"results":"26","hashOfConfig":"17"},{"size":118,"mtime":1608755653847,"results":"27","hashOfConfig":"17"},{"size":2348,"mtime":1610640436805,"results":"28","hashOfConfig":"17"},{"size":2456,"mtime":1610638859947,"results":"29","hashOfConfig":"17"},{"size":5145,"mtime":1610640119678,"results":"30","hashOfConfig":"17"},{"size":905,"mtime":1610548897098,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1n35ik",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"/Users/maximilianresch/Documents/recipe-app/app/src/index.js",[],["67","68"],"/Users/maximilianresch/Documents/recipe-app/app/src/App.js",[],"/Users/maximilianresch/Documents/recipe-app/app/src/reportWebVitals.js",[],"/Users/maximilianresch/Documents/recipe-app/app/src/pages/Login.js",[],"/Users/maximilianresch/Documents/recipe-app/app/src/pages/Register.js",[],"/Users/maximilianresch/Documents/recipe-app/app/src/pages/RecipeForm.js",["69","70","71","72"],"import React, { useState, useEffect } from \"react\";\nimport style from \"./style.module.css\";\n\nimport * as yup from \"yup\";\n\nimport { Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport recipeApi from \"../utils/recipeApi\";\n\nimport {\n  Input,\n  Textarea,\n  Select,\n  Button,\n  ButtonGroup,\n  Stack,\n} from \"@chakra-ui/react\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    minWidth: 120,\n    marginLeft: 10,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\n/*\n  const recipe = [\n          {\n            title: \"Gulasch\",\n            guide: \"geh vorher scheißn (nicht hände waschen!!!)\",\n            portions: \"2\"\n            ingridients: [\n              {\n                name: \"Knoblauch\",\n                amount: \"234\",\n                measure: \"kg\"\n              }\n            ]\n          }\n        ]\n\n      */\n\nlet schema = yup.object().shape({\n  title: yup.string().required(),\n  guide: yup.string().required(),\n  ingredients: yup\n    .array(\n      yup.object().shape({\n        name: yup.string().required(),\n      })\n    )\n    .min(1),\n});\n\nexport default function RecipeForm() {\n  const [title, setTitle] = useState(\"\");\n  const [currentIngredient, setCurrentIngredient] = useState(\"\");\n  const [ingredients, setIngredients] = useState([]);\n  const [guide, setGuide] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [measure, setMeasure] = useState(\"\");\n\n  const classes = useStyles();\n\n  const [recipies, setRecipies] = useState([]);\n\n  const onSubmit = async () => {\n    const newRecipie = { title, ingredients, guide };\n\n    const valid = await schema.validate(newRecipie).catch((e) => {\n      const errorMessage = e.errors[0];\n      setErrorMessage(errorMessage);\n\n      console.log(\"error\", errorMessage);\n    });\n\n    if (!valid) {\n      return;\n    }\n\n    console.log(\"valid\", valid);\n\n    const newList = [...recipies];\n    newList.push(newRecipie);\n    setRecipies(newList);\n    setTitle(\"\");\n    setIngredients([]);\n    setGuide(\"\");\n    setErrorMessage(\"\");\n\n    const response = await recipeApi.post(\"/recipe\", newRecipie);\n  };\n\n  const onAdd = async () => {\n    const newIngredient = { name: currentIngredient, amount, measure };\n    const newList = [...ingredients];\n    newList.push(newIngredient);\n    setIngredients(newList);\n\n    setCurrentIngredient(\"\");\n    setAmount(\"\");\n  };\n\n  return (\n    <div>\n      <form className={style.form}>\n        <h1>Recipe</h1>\n        <div>\n          <Input\n            variant=\"filled\"\n            value={title}\n            onChange={(e) => {\n              setTitle(e.target.value);\n            }}\n            placeholder=\"title\"\n          ></Input>\n        </div>\n        <div>\n          <Textarea\n            multiline\n            rows={10}\n            variant=\"filled\"\n            value={guide}\n            placeholder=\"guide\"\n            onChange={(e) => {\n              setGuide(e.target.value);\n            }}\n          ></Textarea>\n        </div>\n        <div>\n          <Input\n            variant=\"filled\"\n            value={currentIngredient}\n            placeholder=\"ingredients\"\n            onChange={(e) => {\n              setCurrentIngredient(e.target.value);\n            }}\n          ></Input>\n        </div>\n        <Box display=\"flex\" flexDirection=\"row\" gap=\"10px\">\n          <Input\n            variant=\"filled\"\n            value={amount}\n            placeholder=\"amount\"\n            onChange={(e) => {\n              setAmount(e.target.value);\n            }}\n          ></Input>\n          <Box style={{ paddingLeft: \"4px\", width: \"100%\" }}>\n            <Select\n              variant=\"filled\"\n              placeholder=\"measure\"\n              onChange={(e) => {\n                setMeasure(e.target.value);\n              }}\n            >\n              <option value=\"\"></option>\n              <option value={\"g\"}>g</option>\n              <option value={\"kg\"}>kg</option>\n              <option value={\"ml\"}>ml</option>\n            </Select>\n          </Box>\n        </Box>\n        {ingredients.map((ingredient, i) => {\n          return (\n            <p key={i}>\n              {\" \"}\n              {ingredient.amount} {ingredient.measure} {ingredient.name}\n            </p>\n          );\n        })}\n        <Stack direction=\"column\" spacing={4}>\n          <Button variant=\"outline\" onClick={onAdd} colorScheme=\"green\">\n            Add ingredients and amount\n          </Button>\n          <Button variant=\"outline\" onClick={onSubmit} colorScheme=\"green\">\n            Submit\n          </Button>\n        </Stack>\n      </form>\n      <div\n        style={{\n          color: \"red\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          padding: \"20px\",\n        }}\n      >\n        {errorMessage}\n      </div>\n\n      <div className={style.list}>\n        <ul>\n          {recipies.map((recipe, i) => {\n            return (\n              <div key={i} style={{ marginTop: \"1rem\" }}>\n                <h2>Preview</h2>\n                <li>\n                  <h4> Title:</h4> {recipe.title}\n                  <h4>ingredients:</h4>\n                  {recipe.ingredients.map((ingredient, i) => {\n                    return (\n                      <div key={i}>\n                        <p>\n                          {ingredient.amount} {ingredient.measure}{\" \"}\n                          {ingredient.name}\n                        </p>\n                      </div>\n                    );\n                  })}\n                  <h4>guide:</h4>\n                  {recipe.guide}\n                </li>\n                <br />\n              </div>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","/Users/maximilianresch/Documents/recipe-app/app/src/pages/Home.js",[],"/Users/maximilianresch/Documents/recipe-app/app/src/utils/auth.js",[],"/Users/maximilianresch/Documents/recipe-app/app/src/components/Footer.js",[],"/Users/maximilianresch/Documents/recipe-app/app/src/utils/recipeApi.js",[],"/Users/maximilianresch/Documents/recipe-app/app/src/globalState.js",[],"/Users/maximilianresch/Documents/recipe-app/app/src/pages/Profile.js",[],"/Users/maximilianresch/Documents/recipe-app/app/src/pages/RecipeList.js",["73","74"],"import { useState, useEffect } from \"react\";\nimport recipeApi from \"../utils/recipeApi\";\n// import { Link } from \"react-router-dom\";\n\nimport style from \"./style.module.css\";\n\nimport {\n  Table,\n  Tbody,\n  Tr,\n  Td,\n  Divider,\n  Text,\n  Link,\n  Button,\n  ButtonGroup,\n} from \"@chakra-ui/react\";\n\nimport { useRecoilState } from \"recoil\";\nimport { userState } from \"../globalState\";\n\nexport default function RecipeList() {\n  const [recipies, setRecipies] = useState([]);\n  const [user, setUser] = useRecoilState(userState);\n\n  useEffect(async () => {\n    const response = await recipeApi.get(`/recipe`);\n    setRecipies(response.data.recipes);\n  }, []);\n\n  return (\n    <div>\n      <>\n        {!user && (\n          <Text\n            style={{\n              paddingTop: \"100px\",\n              textAlign: \"center\",\n            }}\n          >\n            {\" \"}\n            {\":(\"}\n            <br />\n            You have to create an account{\" \"}\n            <Link color=\"teal.500\" href={\"/register\"}>\n              here\n            </Link>{\" \"}\n            or if you have already one click\n            <Link color=\"teal.500\" href={\"/login\"}>\n              {\" \"}\n              here\n            </Link>\n          </Text>\n        )}\n      </>\n      {recipies.map((recipe, i) => {\n        return (\n          <div className={style.recipeList}>\n            <h1>{recipe.title}</h1>\n            <Table key={i} variant=\"simple\" bg=\"#D9896C\" color=\"whitesmoke\">\n              {recipe.ingredients.map((ingredient, i) => {\n                return (\n                  <Tbody className={style.tbody} key={i}>\n                    <Tr className={style.tr}>\n                      <Td>\n                        {ingredient.amount} {ingredient.measure}{\" \"}\n                        {ingredient.name}\n                      </Td>\n                    </Tr>\n                  </Tbody>\n                );\n              })}\n            </Table>\n            <div>\n              <h2>Guide: </h2>\n              <p>{recipe.guide}</p>\n              <ButtonGroup style={{paddingTop: \"10px\", paddingBottom: \"10px\"}} variant=\"outline\" spacing=\"8\">\n                <Button colorScheme=\"blue\">\n                  <Link href={`/recipes/${recipe._id}/edit`}>Edit</Link>\n                </Button>\n                <Button colorScheme=\"red\">Delete</Button>\n              </ButtonGroup>\n\n              <br />\n            </div>\n            <Divider />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","/Users/maximilianresch/Documents/recipe-app/app/src/pages/RecipeEdit.js",["75","76","77","78"],"import React, { useState, useEffect } from \"react\";\nimport {useParams} from 'react-router-dom'\nimport style from \"./style.module.css\";\n\nimport * as yup from \"yup\";\n\nimport { Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport recipeApi from \"../utils/recipeApi\";\n\nimport { Input, Textarea, Select, Button, Stack } from '@chakra-ui/react';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    minWidth: 120,\n    marginLeft: 10,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\n/*\n  const recipe = [\n          {\n            title: \"Gulasch\",\n            guide: \"geh vorher scheißn (nicht hände waschen!!!)\",\n            portions: \"2\"\n            ingridients: [\n              {\n                name: \"Knoblauch\",\n                amount: \"234\",\n                measure: \"kg\"\n              }\n            ]\n          }\n        ]\n\n      */\n\nlet schema = yup.object().shape({\n  title: yup.string().required(),\n  guide: yup.string().required(),\n  ingredients: yup\n    .array(\n      yup.object().shape({\n        name: yup.string().required(),\n      })\n    )\n    .min(1),\n});\n\nexport default function RecipeEdit() {\n\n  let { id } = useParams();\n\n  useEffect( async () => {\n    console.log('recipeId', id)\n\n    const response = await recipeApi.get(`/recipe/${id}` )\n\n    const body = response.data\n\n    const { recipie } = body\n    \n  \n    setTitle(recipie.title)\n    setIngredients(recipie.ingredients)\n    setGuide(recipie.guide)\n    setAmount(recipie.amount)\n    setMeasure(recipie.measure)\n\n  }, [id])\n\n\n  \n  const [title, setTitle] = useState(\"\");\n  const [currentIngredient, setCurrentIngredient] = useState(\"\");\n  const [ingredients, setIngredients] = useState([]);\n  const [guide, setGuide] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [measure, setMeasure] = useState(\"\");\n\n  const classes = useStyles();\n\n  const [recipies, setRecipies] = useState([]);\n\n  const onSubmit = async () => {\n    const newRecipie = { title, ingredients, guide };\n\n    const valid = await schema.validate(newRecipie).catch((e) => {\n      const errorMessage = e.errors[0];\n      setErrorMessage(errorMessage);\n\n      console.log(\"error\", errorMessage);\n    });\n\n    if (!valid) {\n      return;\n    }\n\n    console.log(\"valid\", valid);\n\n    const newList = [...recipies];\n    newList.push(newRecipie);\n    setRecipies(newList);\n\n    const response = await recipeApi.put(`/recipe/${id}`, newRecipie);\n  };\n\n  const onDelete = (index) => {\n    const newList = [...recipies];\n    newList.splice(index, 1);\n    setRecipies(newList);\n  };\n\n  const onAdd = async () => {\n    const newIngredient = { name: currentIngredient, amount, measure };\n    const newList = [...ingredients];\n    newList.push(newIngredient);\n    setIngredients(newList);\n  };\n\n  return (\n    <div>\n      <form className={style.form}>\n        <h1>Recipe</h1>\n        <div>\n        <Input\n          variant=\"filled\"\n          value={title}\n          onChange={(e) => {\n            setTitle(e.target.value);\n          }}\n          placeholder=\"title\"\n        ></Input>\n        </div>\n        <div>\n        <Textarea\n          multiline\n          rows={10}\n          variant=\"filled\"\n          value={guide}\n          placeholder=\"guide\"\n          onChange={(e) => {\n            setGuide(e.target.value);\n          }}\n        ></Textarea>\n        </div>\n        <div>\n        <Input\n          variant=\"filled\"\n          value={currentIngredient}\n          placeholder=\"ingredients\"\n          onChange={(e) => {\n            setCurrentIngredient(e.target.value);\n          }}\n        ></Input>\n        </div>\n        <Box display=\"flex\" flexDirection=\"row\" gap=\"10px\">\n          <Input\n            variant=\"filled\"\n            value={amount}\n            placeholder=\"amount\"\n            onChange={(e) => {\n              setAmount(e.target.value);\n            }}\n          ></Input>\n          <Select\n            variant=\"filled\"\n              placeholder=\"measure\"\n              onChange={(e) => {\n                setMeasure(e.target.value);\n              }}\n            >\n              <option value=\"\"></option>\n              <option value={\"g\"}>g</option>\n              <option value={\"kg\"}>kg</option>\n              <option value={\"ml\"}>ml</option>\n            </Select>\n        </Box>\n        {ingredients.map((ingredient, i) => {\n          return (\n            <p key={i}>\n              {\" \"}\n              {ingredient.amount} {ingredient.measure} {ingredient.name}\n            </p>\n          );\n        })}\n        <Stack direction=\"column\" spacing={4}>\n          <Button variant=\"outline\" onClick={onAdd} colorScheme=\"green\">\n            Add ingredients and amount\n          </Button>\n          <Button variant=\"outline\" onClick={onSubmit} colorScheme=\"green\">\n            Submit\n          </Button>\n        </Stack>\n      </form>\n      <div\n        style={{\n          color: \"red\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          padding: \"20px\",\n        }}\n      >\n        {errorMessage}\n      </div>\n      \n    </div>\n  );\n}\n","/Users/maximilianresch/Documents/recipe-app/app/src/helper/useResponsive.js",[],["79","80"],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":27,"nodeType":"87","messageId":"88","endLine":1,"endColumn":36},{"ruleId":"85","severity":1,"message":"89","line":15,"column":3,"nodeType":"87","messageId":"88","endLine":15,"endColumn":14},{"ruleId":"85","severity":1,"message":"90","line":68,"column":9,"nodeType":"87","messageId":"88","endLine":68,"endColumn":16},{"ruleId":"85","severity":1,"message":"91","line":96,"column":11,"nodeType":"87","messageId":"88","endLine":96,"endColumn":19},{"ruleId":"85","severity":1,"message":"92","line":24,"column":16,"nodeType":"87","messageId":"88","endLine":24,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":26,"column":13,"nodeType":"95","endLine":29,"endColumn":4},{"ruleId":"93","severity":1,"message":"94","line":57,"column":14,"nodeType":"95","endLine":73,"endColumn":4},{"ruleId":"85","severity":1,"message":"90","line":85,"column":9,"nodeType":"87","messageId":"88","endLine":85,"endColumn":16},{"ruleId":"85","severity":1,"message":"91","line":109,"column":11,"nodeType":"87","messageId":"88","endLine":109,"endColumn":19},{"ruleId":"85","severity":1,"message":"96","line":112,"column":9,"nodeType":"87","messageId":"88","endLine":112,"endColumn":17},{"ruleId":"81","replacedBy":"97"},{"ruleId":"83","replacedBy":"98"},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'ButtonGroup' is defined but never used.","'classes' is assigned a value but never used.","'response' is assigned a value but never used.","'setUser' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'onDelete' is assigned a value but never used.",["99"],["100"],"no-global-assign","no-unsafe-negation"]